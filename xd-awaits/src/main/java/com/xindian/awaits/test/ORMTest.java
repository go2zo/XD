package com.xindian.awaits.test;

import java.beans.PropertyVetoException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.xindian.awaits.Configuration;
import com.xindian.awaits.Criteria;
import com.xindian.awaits.Order;
import com.xindian.awaits.Restrictions;
import com.xindian.awaits.Session;
import com.xindian.awaits.TableMeta;
import com.xindian.awaits.Transaction;
import com.xindian.awaits.exception.DBAccessException;
import com.xindian.awaits.exception.MappingException;

/**
 * awaits的示例程序
 * 
 * @author Elva
 * 
 */
public class ORMTest
{
	private static Logger logger = LoggerFactory.getLogger(ORMTest.class);

	public static void testSave(ComboPooledDataSource dataSource)
	{
		try
		{
			Connection conn = dataSource.getConnection();
			logger.debug(conn.getMetaData().getDatabaseProductName());
			logger.debug(conn.getMetaData().getSQLKeywords());
			ResultSet s = conn.getMetaData().getTypeInfo();
			while (s.next())
			{
				logger.debug(s.getString(1) + "   " + s.getString(2) + "	PRECISION:" + s.getString(13));
			}

			conn.close();
		} catch (SQLException e)
		{
			e.printStackTrace();
		}
	}

	public static void main(String[] args) throws MappingException
	{
		getConfiguration();
	}

	public static void getConfiguration() throws MappingException, DBAccessException
	{
		Configuration configuration = new Configuration();
		ComboPooledDataSource dataSource;
		try
		{
			logger.debug("Init dataSource...");
			dataSource = new ComboPooledDataSource();
			dataSource.setUser("root");
			dataSource.setPassword("");
			dataSource.setJdbcUrl("jdbc:mysql://localhost:3306/test");
			dataSource.setDriverClass("com.mysql.jdbc.Driver");
			dataSource.setInitialPoolSize(2);
			dataSource.setMinPoolSize(1);
			dataSource.setMaxPoolSize(10);
			dataSource.setMaxStatements(50);
			dataSource.setMaxIdleTime(60);
			logger.debug("Init dataSource successfully");
		} catch (PropertyVetoException e)
		{
			logger.debug("Init dataSource failed!!!");
			e.printStackTrace();
			throw new RuntimeException(e);
		}

		// INIT CONFIG
		configuration.setDataSource(dataSource)// SET DATASOURCE
				.addClass(Person.class)// ADD Mapping Class TO the Config
		;

		// CREATE A SESSION
		Session session = configuration.buildSessionFactory().openSession();

		// createTable(session);

		// START A TRANSACTION
		Transaction transaction = session.beginTransaction();// BEGIN A
																// TRANSACTION

		// NEW a Person
		Person p = new Person();
		p.setId(12L);// ID WILL BE IGNORED, BECAUSE IT WAS DECLARED AS IDENTITY
						// AND WILL BE GENERATED BY THE DB
		p.setName("name");
		p.setBirthday(new Date());

		// SAVE the Person TO DB
		Long id = (Long) session.save(p);
		logger.debug("Save Person id = " + id);

		// DELETE the Person (ID == 1)
		boolean flag = session.delete(1, Person.class);
		logger.debug("Delete Person flag = " + flag);

		transaction.commit();// COMMIT THE TRANSACTION
		// transaction.rollback();

		// CREATE A CRITERIA
		Criteria<Person> personCriteria = session.createCriteria(Person.class)//
				.addOrder(Order.desc("id"))// ORDER BY ID
				.add(Restrictions.like("name", "O%"));
		// .add(Restrictions.sql("id = ? OR name LIKE ?", 22, "1%"))//
		;
		PrintUtils.pln("COUNT IS: " + personCriteria.count());
		PrintUtils.pln(personCriteria.list());

		logger.debug("Get Person(ID = 1)");
		PrintUtils.pln(session.get(1, Person.class));

		logger.debug("List All Persons");
		PrintUtils.pln(session.list(Person.class));

		PrintUtils.pln(session.list(5, 10, Person.class));

		logger.debug("Update Persons ");
		session.createUpdater(Person.class)//
				.set("birthday", new Date())//
				.set("name", "OH!")//
				.add(Restrictions.and(Restrictions.lt("id", 20), Restrictions.gt("id", 10)))//
				.update()//
		;//
		PrintUtils.pln(session.list(Person.class));

		session.close();// CLOSE SESSON
	}

	public static void createTable(Session session)
	{
		TableMeta<?> tableMeta = TableMeta.getTableMeta(Person.class);

		session.update(tableMeta.getDDL());

		logger.debug(tableMeta.getDDL());
	}

	// more complex criteria
	public static void a(Session session)
	{
		Criteria<Person> criteria = session.createCriteria(Person.class);
		//
		criteria.add(Restrictions.like("email", "q%"))//
				.add(Restrictions.or(//
						Restrictions.eq("password", "pass"), //
						Restrictions.in("status", new Integer[] { 0, 1, 2, 3, 4 })))//
				.add(Restrictions.isNotNull("password"))//
				.addOrder(Order.asc("password"))//
				.addOrder(Order.desc("id"))//
				.setFirstResult(0)//
				.setMaxResults(50)//
				.add(Restrictions.lt("id", 22))//
		;//

		PrintUtils.pln(criteria.list());
	}

}
